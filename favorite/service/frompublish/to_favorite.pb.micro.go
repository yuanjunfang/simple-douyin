// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: to_favorite.proto

package frompublish

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for ToFavoriteService service

func NewToFavoriteServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for ToFavoriteService service

type ToFavoriteService interface {
	UpdateFavoriteCount(ctx context.Context, in *UpdateFavoriteCountRequest, opts ...client.CallOption) (*UpdateFavoriteCountResponse, error)
	GetVideosByIds(ctx context.Context, in *GetVideosByIdsRequest, opts ...client.CallOption) (*GetVideosByIdsResponse, error)
}

type toFavoriteService struct {
	c    client.Client
	name string
}

func NewToFavoriteService(name string, c client.Client) ToFavoriteService {
	return &toFavoriteService{
		c:    c,
		name: name,
	}
}

func (c *toFavoriteService) UpdateFavoriteCount(ctx context.Context, in *UpdateFavoriteCountRequest, opts ...client.CallOption) (*UpdateFavoriteCountResponse, error) {
	req := c.c.NewRequest(c.name, "ToFavoriteService.UpdateFavoriteCount", in)
	out := new(UpdateFavoriteCountResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toFavoriteService) GetVideosByIds(ctx context.Context, in *GetVideosByIdsRequest, opts ...client.CallOption) (*GetVideosByIdsResponse, error) {
	req := c.c.NewRequest(c.name, "ToFavoriteService.GetVideosByIds", in)
	out := new(GetVideosByIdsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ToFavoriteService service

type ToFavoriteServiceHandler interface {
	UpdateFavoriteCount(context.Context, *UpdateFavoriteCountRequest, *UpdateFavoriteCountResponse) error
	GetVideosByIds(context.Context, *GetVideosByIdsRequest, *GetVideosByIdsResponse) error
}

func RegisterToFavoriteServiceHandler(s server.Server, hdlr ToFavoriteServiceHandler, opts ...server.HandlerOption) error {
	type toFavoriteService interface {
		UpdateFavoriteCount(ctx context.Context, in *UpdateFavoriteCountRequest, out *UpdateFavoriteCountResponse) error
		GetVideosByIds(ctx context.Context, in *GetVideosByIdsRequest, out *GetVideosByIdsResponse) error
	}
	type ToFavoriteService struct {
		toFavoriteService
	}
	h := &toFavoriteServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&ToFavoriteService{h}, opts...))
}

type toFavoriteServiceHandler struct {
	ToFavoriteServiceHandler
}

func (h *toFavoriteServiceHandler) UpdateFavoriteCount(ctx context.Context, in *UpdateFavoriteCountRequest, out *UpdateFavoriteCountResponse) error {
	return h.ToFavoriteServiceHandler.UpdateFavoriteCount(ctx, in, out)
}

func (h *toFavoriteServiceHandler) GetVideosByIds(ctx context.Context, in *GetVideosByIdsRequest, out *GetVideosByIdsResponse) error {
	return h.ToFavoriteServiceHandler.GetVideosByIds(ctx, in, out)
}
