// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: to_relation.proto

package services

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for ToRelationService service

func NewToRelationServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for ToRelationService service

type ToRelationService interface {
	UpdateFollowerCount(ctx context.Context, in *UpdateFollowerCountRequest, opts ...client.CallOption) (*UpdateFollowerCountResponse, error)
	UpdateFollowingCount(ctx context.Context, in *UpdateFollowingCountRequest, opts ...client.CallOption) (*UpdateFollowingCountResponse, error)
	GetUsersByIds(ctx context.Context, in *GetUsersByIdsRequest, opts ...client.CallOption) (*GetUsersByIdsResponse, error)
}

type toRelationService struct {
	c    client.Client
	name string
}

func NewToRelationService(name string, c client.Client) ToRelationService {
	return &toRelationService{
		c:    c,
		name: name,
	}
}

func (c *toRelationService) UpdateFollowerCount(ctx context.Context, in *UpdateFollowerCountRequest, opts ...client.CallOption) (*UpdateFollowerCountResponse, error) {
	req := c.c.NewRequest(c.name, "ToRelationService.UpdateFollowerCount", in)
	out := new(UpdateFollowerCountResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toRelationService) UpdateFollowingCount(ctx context.Context, in *UpdateFollowingCountRequest, opts ...client.CallOption) (*UpdateFollowingCountResponse, error) {
	req := c.c.NewRequest(c.name, "ToRelationService.UpdateFollowingCount", in)
	out := new(UpdateFollowingCountResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toRelationService) GetUsersByIds(ctx context.Context, in *GetUsersByIdsRequest, opts ...client.CallOption) (*GetUsersByIdsResponse, error) {
	req := c.c.NewRequest(c.name, "ToRelationService.GetUsersByIds", in)
	out := new(GetUsersByIdsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ToRelationService service

type ToRelationServiceHandler interface {
	UpdateFollowerCount(context.Context, *UpdateFollowerCountRequest, *UpdateFollowerCountResponse) error
	UpdateFollowingCount(context.Context, *UpdateFollowingCountRequest, *UpdateFollowingCountResponse) error
	GetUsersByIds(context.Context, *GetUsersByIdsRequest, *GetUsersByIdsResponse) error
}

func RegisterToRelationServiceHandler(s server.Server, hdlr ToRelationServiceHandler, opts ...server.HandlerOption) error {
	type toRelationService interface {
		UpdateFollowerCount(ctx context.Context, in *UpdateFollowerCountRequest, out *UpdateFollowerCountResponse) error
		UpdateFollowingCount(ctx context.Context, in *UpdateFollowingCountRequest, out *UpdateFollowingCountResponse) error
		GetUsersByIds(ctx context.Context, in *GetUsersByIdsRequest, out *GetUsersByIdsResponse) error
	}
	type ToRelationService struct {
		toRelationService
	}
	h := &toRelationServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&ToRelationService{h}, opts...))
}

type toRelationServiceHandler struct {
	ToRelationServiceHandler
}

func (h *toRelationServiceHandler) UpdateFollowerCount(ctx context.Context, in *UpdateFollowerCountRequest, out *UpdateFollowerCountResponse) error {
	return h.ToRelationServiceHandler.UpdateFollowerCount(ctx, in, out)
}

func (h *toRelationServiceHandler) UpdateFollowingCount(ctx context.Context, in *UpdateFollowingCountRequest, out *UpdateFollowingCountResponse) error {
	return h.ToRelationServiceHandler.UpdateFollowingCount(ctx, in, out)
}

func (h *toRelationServiceHandler) GetUsersByIds(ctx context.Context, in *GetUsersByIdsRequest, out *GetUsersByIdsResponse) error {
	return h.ToRelationServiceHandler.GetUsersByIds(ctx, in, out)
}
